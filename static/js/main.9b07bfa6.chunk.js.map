{"version":3,"sources":["service/categoryContext.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CategoryContext","createContext","undefined","useCategory","useContext","CategoryProvider","children","useState","category","setCategory","Provider","value","Home","lazy","theme","createMuiTheme","typography","fontFamily","Loading","styled","div","App","ThemeProvider","fallback","CircularProgress","size","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAOMA,EAAkBC,6BACtBC,GAGWC,EAAc,kBAAMC,qBAAWJ,IAK/BK,EAAmB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAsB,EACvBC,mBAAS,IADc,mBAChDC,EADgD,KACtCC,EADsC,KAGvD,OACE,kBAACT,EAAgBU,SAAjB,CAA0BC,MAAO,CAAEH,WAAUC,gBAC1CH,K,yWCbP,IAAMM,EAAOC,gBAAK,kBAAM,uDAElBC,EAAQC,YAAe,CAC3BC,WAAY,CACVC,WAAY,iBAIVC,EAAUC,IAAOC,IAAV,KA8BEC,MAvBf,WACE,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAeR,MAAOA,GACpB,kBAAC,WAAD,CACES,SACE,kBAACL,EAAD,KACE,kBAACM,EAAA,EAAD,CAAkBC,KAAM,QAI5B,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAChB,EAAD,SACpC,kBAAC,IAAD,CAAOiB,UAAWjB,UCzBZkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b07bfa6.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\n\ntype CategoryContextType = {\n  category: string;\n  setCategory: (value: string) => void;\n};\n\nconst CategoryContext = createContext<CategoryContextType | undefined>(\n  undefined\n);\n\nexport const useCategory = () => useContext(CategoryContext);\n\ntype Props = {\n  children: React.ReactNode;\n};\nexport const CategoryProvider = ({ children }: Props) => {\n  const [category, setCategory] = useState(\"\");\n\n  return (\n    <CategoryContext.Provider value={{ category, setCategory }}>\n      {children}\n    </CategoryContext.Provider>\n  );\n};\n","import React, { Suspense, lazy } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { CategoryProvider } from \"./service/categoryContext\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\nconst Home = lazy(() => import(\"./pages/home\"));\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: \"Courier New\",\n  },\n});\n\nconst Loading = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nfunction App() {\n  return (\n    <CategoryProvider>\n      <ThemeProvider theme={theme}>\n        <Suspense\n          fallback={\n            <Loading>\n              <CircularProgress size={100} />\n            </Loading>\n          }\n        >\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" render={() => <Home />} />\n              <Route component={Home} />\n            </Switch>\n          </Router>\n        </Suspense>\n      </ThemeProvider>\n    </CategoryProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}